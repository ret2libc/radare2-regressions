#!/bin/sh
# LGPL - Copyright (C) 2014-2015 Maijin, pancake

for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

NAME="axt avr"
BROKEN=
FILE=../../bins/firmware/main.avr
ARGS=
CMDS='f str.hello 12 @ 0x276
Csa 12 @ str.hello
axd 0x260 @ str.hello
pd 1 @ 0x260'
EXPECT='            ; DATA XREF from 0x00000276 (str.hello + 0)
            0x00000260      80e0           ldi r24, 0x00
'
run_test

NAME="axt capstone x86"
BROKEN=
FILE=../../bins/elf/analysis/main
ARGS=
CMDS='e asm.arch = x86
e anal.arch = x86
e scr.color=false
e scr.wheel = false
aa
axt @ str.Hello_World'
EXPECT='sym.main 0x40050a [DATA] mov edi, str.Hello_World
'
run_test


NAME="axt capstone x86: IOLI0"
BROKEN=
FILE=../../bins/elf/ioli/crackme0x00
ARGS=
CMDS='e asm.arch = x86
e anal.arch = x86
e scr.color=false
e scr.wheel = false
aa
axt @ str.Password:'
EXPECT='main 0x804843c [DATA] mov dword [esp], str.Password:
'
run_test

NAME="axt capstone x86: IOLI7 aa"
BROKEN=
FILE=../../bins/elf/ioli/crackme0x07
ARGS=
CMDS='
aaa
axt @ sym.imp.exit'
EXPECT='sub.strlen_5b9 0x804866f [CALL] call sym.imp.exit
sub.Password_Incorrect_524 0x804853d [CALL] call sym.imp.exit
sub.sscanf_542 0x80485ab [CALL] call sym.imp.exit
'
run_test

NAME="axt capstone x86: IOLI7 aa"
BROKEN=
FILE=../../bins/elf/ioli/crackme0x07
ARGS=
CMDS='
aaaa
axt @ sym.imp.exit'
EXPECT='sub.strlen_5b9 0x804866f [CALL] call sym.imp.exit
sub.Password_Incorrect_524 0x804853d [CALL] call sym.imp.exit
sub.sscanf_542 0x80485ab [CALL] call sym.imp.exit
'
run_test

NAME="axt respect relsub"
BROKEN=
FILE=../../bins/pe/ibknoreloc64.exe
ARGS=
CMDS='aaa
e asm.relsub=false
axt @ sym.imp.msvcrt.dll_printf
e asm.relsub=true
axt @ sym.imp.msvcrt.dll_printf
'
EXPECT='entry0 0xffffffffffff100a [CALL] call qword [rip + 0xd8]
entry0 0xffffffffffff100a [CALL] call qword sym.imp.msvcrt.dll_printf
'
run_test

NAME="ax-"
BROKEN=
FILE=-
IGNORE_ERR=1
ARGS=
CMDS='ax 10 20
axq
ax-10 20
axq
'
EXPECT='0x00000014 -> 0x0000000a  UNKNOWN
'
run_test

NAME="ax-@"
BROKEN=
FILE=-
IGNORE_ERR=1
ARGS=
CMDS='s 20
ax 10
axq
ax-10
axq
'
EXPECT='0x00000014 -> 0x0000000a  UNKNOWN
'
run_test

NAME="ax-*"
BROKEN=
FILE=-
IGNORE_ERR=1
ARGS=
CMDS='ax 10
ax
ax-*
ax
'
EXPECT='ref.unk.0x0=0xa
xref.unk.0xa=0
types=code.jmp,code.call,data.mem,data.string
types=code.jmp,code.call,data.mem,data.string
'

NAME="axt unknown function"
BROKEN=
FILE=../../bins/pe/lab11.malware
IGNORE_ERR=1
ARGS=
CMDS='aaa
axt fcn.00401270
'
EXPECT='(nofunc) 0x401a1d [CALL] call fcn.00401270
'
run_test



NAME="axf string ref capstone x86"
BROKEN=
FILE=../../bins/elf/ioli/crackme0x03
ARGS=
CMDS='e asm.arch = x86
e anal.arch = x86
e scr.color = false
e scr.wheel = false
aa
axt str.Sdvvzrug_RN
axf 0x804848a
'
EXPECT='sym.test 0x804848a [DATA] mov dword [esp], str.Sdvvzrug_RN
d 0x804848a mov dword [esp], str.Sdvvzrug_RN
'
run_test

NAME="x86 ref issue"
CMDS='
e asm.bits=64
e asm.arch=x86
wx c7052a44000050000000
ao~^ptr[1]
'
EXPECT='0x00004434
'
run_test

NAME="strings xref issue"
FILE=../../bins/elf/redpill
BROKEN=
CMDS='
e anal.strings=true
aa
aae
axt 0x00001d89
axt 0x00001da0
axt 0x00001db7
axt 0x00001dd1
axt 0x00001de8
axt 0x00001df4
axt 0x00001e09
'
EXPECT='main 0x1457 [STRING] lea eax, str.Take_the_Red_Pill
main 0x148e [STRING] lea eax, str.use:_._exploit1_PILL
main 0x14eb [STRING] lea eax, str.Red_Pill__0x50444552
main 0x1502 [STRING] lea eax, str.Your_Pill_0x_08x
main 0x1523 [STRING] lea eax, str.Red_Pill
main 0x1557 [STRING] lea eax, str.fwhibbit
main 0x161d [STRING] lea eax, str.Blue_Pill
'
run_test

NAME='reference to like mov [0x400000], 0x1234'
BROKEN=
FILE=../../bins/elf/analysis/reference.out
ARGS=
CMDS='
aaa
axt@0x0804a01c
'
EXPECT='sym.main 0x80483ee [DATA] mov dword obj.a, 0x1337
'
run_test

NAME='delete references with ax-'
FILE=-
#'../../bins/elf/crackme'
ARGS=
CMDS='
ax 10 20
axq
ax- 10
axq
ax 10 20
ax 30 40
axq
ax-*
axq
'
EXPECT='0x00000014 -> 0x0000000a  UNKNOWN
0x00000014 -> 0x0000000a  UNKNOWN
0x00000028 -> 0x0000001e  UNKNOWN
'
run_test

NAME='reference PIC binary'
BROKEN=
FILE=../../bins/elf/analysis/xrefpic
ARGS=
CMDS='
e anal.strings=true
aa
aae
axt@0x80484e0
'
EXPECT='main 0x8048432 [STRING] lea eax, str.Hello_PIC
'
run_test

NAME="strings xref issue without relsub"
FILE=../../bins/elf/redpill
CMDS='
e anal.strings=true
e asm.relsub=false
aa
aae
axt 0x00001d89
axt 0x00001da0
axt 0x00001db7
axt 0x00001dd1
axt 0x00001de8
axt 0x00001df4
axt 0x00001e09
'
EXPECT='main 0x1457 [STRING] lea eax, [esi - 0x2277]
main 0x148e [STRING] lea eax, [esi - 0x2260]
main 0x14eb [STRING] lea eax, [esi - 0x2249]
main 0x1502 [STRING] lea eax, [esi - 0x222f]
main 0x1523 [STRING] lea eax, [esi - 0x2218]
main 0x1557 [STRING] lea eax, [esi - 0x220c]
main 0x161d [STRING] lea eax, [esi - 0x21f7]
'
run_test

NAME='reference PIC binary without relsub'
FILE=../../bins/elf/analysis/xrefpic
ARGS=
CMDS='
e anal.strings=true
e asm.relsub=false
aa
aae
axt@0x80484e0
'
EXPECT='main 0x8048432 [STRING] lea eax, [ebx - 0x1b20]
'
run_test

NAME='refs on PIC binary disassembly'
FILE=../../bins/elf/analysis/xrefpic
ARGS=
CMDS='
e anal.strings=true
aa
aae
pd 1 @ 0x08048432
'
EXPECT='|           0x08048432      8d83e0e4ffff   lea eax, str.Hello_PIC      ; 0x80484e0 ; "Hello PIC!"
'
run_test

NAME='refs on PIC binary disassembly (color)'
FILE=../../bins/elf/analysis/xrefpic
ARGS=
CMDS='
e asm.bytes=false
e asm.comments=false
e scr.color=1
e anal.strings=true
aa
aae
pd 1 @ 0x08048432
'
EXPECT='[36m|[0m [36m          [0m[32m0x08048432[0m      [37mlea[36m eax[0m,[36m [0m[33mstr.Hello_PIC[0m[36m[0m[0m
'
run_test

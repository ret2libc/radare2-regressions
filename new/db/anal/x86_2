NAME=r_anal_fcn_split_bb FITFCNSZ fix (#12008)
FILE=-
CMDS=<<EXPECT
e anal.jmp.mid=false
e io.cache=true
wx b8210000c1ebfdbb2c000000000
af
afi
?e
afb
?e
e asm.bb.middle=true
pdf
?e
e asm.bb.middle=false
pdf
EXPECT=<<RUN
#
offset: 0x00000000
name: fcn.00000000
size: 7
is-pure: true
realsz: 7
stackframe: 0
call-convention: amd64
cyclomatic-cost : 4
cyclomatic-complexity: 0
bits: 64
type: fcn [NEW]
num-bbs: 2
edges: 2
end-bbs: 0
call-refs:
data-refs:
code-xrefs:
in-degree: 0
out-degree: 0
data-xrefs:
locals: 0
args: 0
diff: type: new

0x00000000 0x00000004 00:0000 4 j 0x00000004
0x00000004 0x00000007 00:0000 3 j 0x00000004

/ (fcn) fcn.00000000 7
|   fcn.00000000 ();
|           0x00000000  ~   b8210000c1     mov eax, 0xc1000021         ; '!'
|           ; CODE XREF from fcn.00000000 (0x5)
\       .-> 0x00000004      c1ebfd         shr ebx, 0xfd

/ (fcn) fcn.00000000 7
|   fcn.00000000 ();
|           0x00000000      b8210000c1     mov eax, 0xc1000021         ; '!'
\       `=< 0x00000005      ebfd           jmp 4
RUN

NAME=overlapping basic blocks and anal.jmp.mid
FILE=-
CMDS=<<EXPECT
e asm.bb.middle=true
e anal.jmp.mid=true
e io.cache=true
"(show_fcn bin, wx $0, af-*, af, afi, ?e, afb, ?e, pdr, ?e, agf, ?e, e asm.bb.middle=true, pdf, ?e, e asm.bb.middle=false, pdf)"
.(show_fcn b8210000c1ebfdbb2c000000cc)
?e
.(show_fcn b8210000c1ebfdbb2c000000ebf6)
?e
.(show_fcn b8210000c1ebfdbb2c000000ebf7)
?e
# e anal.nopskip=false  # TODO: why not needed?
.(show_fcn 0f1f440000b8210000c1ebfdbb2c000000ebf0)
EXPECT=<<RUN
#
offset: 0x00000000
name: fcn.00000000
size: 13
is-pure: false
realsz: 16
stackframe: 0
call-convention: amd64
cyclomatic-cost : 6
cyclomatic-complexity: 1
bits: 64
type: fcn [NEW]
num-bbs: 2
edges: 1
end-bbs: 1
call-refs: 0x00000004 J
data-refs: 0x0000002c
code-xrefs: 0x00000005 J
in-degree: 1
out-degree: 0
data-xrefs:
locals: 0
args: 0
diff: type: new

0x00000000 0x00000007 00:0000 7 j 0x00000004
0x00000004 0x0000000d 00:0000 9

/ (fcn) fcn.00000000 16
|   fcn.00000000 ();
| 0x00000000      b8210000c1     mov eax, 0xc1000021                   ; '!'
| 0x00000005      ebfd           jmp 4
| ----------- true: 0x00000004
| ; CODE XREF from fcn.00000000 (0x5)
| 0x00000004      c1ebfd         shr ebx, 0xfd
| 0x00000007      bb2c000000     mov ebx, 0x2c                         ; ','
\ 0x0000000c      cc             int3


[0x00000000]> VV @ fcn.00000000 (nodes 2 edges 1 zoom 100%) BB-NORM mouse:canvas-y mov-speed:5
      .-------------------------.
      |  0x0                    |
      | (fcn) fcn.00000000 16   |
      |   fcn.00000000 ();      |
      | ; '!'                   |
      | mov eax, 0xc1000021     |
      | jmp 4;[ga]              |
      `-------------------------'
          v
          |
    .-----'
    |
.-------------------------------------.
|  0x4                                |
| ; CODE XREF from fcn.00000000 (0x5) |
| shr ebx, 0xfd                       |
| ; ','                               |
| mov ebx, 0x2c                       |
| int3                                |
`-------------------------------------'

/ (fcn) fcn.00000000 16
|   fcn.00000000 ();
|           0x00000000  ~   b8210000c1     mov eax, 0xc1000021         ; '!'
|           ; CODE XREF from fcn.00000000 (0x5)
|       .-> 0x00000004      c1ebfd         shr ebx, 0xfd
|           0x00000007      bb2c000000     mov ebx, 0x2c               ; ','
\           0x0000000c      cc             int3
..

/ (fcn) fcn.00000000 16
|   fcn.00000000 ();
|           0x00000000      b8210000c1     mov eax, 0xc1000021         ; '!'
|       `=< 0x00000005      ebfd           jmp 4
|           0x00000007      bb2c000000     mov ebx, 0x2c               ; ','
\           0x0000000c      cc             int3
..

#
offset: 0x00000000
name: fcn.00000000
size: 14
is-pure: false
realsz: 17
stackframe: 0
call-convention: amd64
cyclomatic-cost : 7
cyclomatic-complexity: 0
bits: 64
type: fcn [NEW]
num-bbs: 2
edges: 2
end-bbs: 0
call-refs: 0x00000004 J 0x00000004 J
data-refs: 0x0000002c
code-xrefs: 0x00000005 J 0x0000000c J
in-degree: 2
out-degree: 0
data-xrefs:
locals: 0
args: 0
diff: type: new

0x00000000 0x00000007 00:0000 7 j 0x00000004
0x00000004 0x0000000e 00:0000 10 j 0x00000004

/ (fcn) fcn.00000000 17
|   fcn.00000000 ();
| 0x00000000      b8210000c1     mov eax, 0xc1000021                   ; '!'
| 0x00000005      ebfd           jmp 4
| ----------- true: 0x00000004
| ; CODE XREFS from fcn.00000000 (0x5, 0xc)
| 0x00000004      c1ebfd         shr ebx, 0xfd
| 0x00000007      bb2c000000     mov ebx, 0x2c                         ; ','
\ 0x0000000c      ebf6           jmp 4
| ----------- true: 0x00000004

[0x00000000]> VV @ fcn.00000000 (nodes 2 edges 2 zoom 100%) BB-NORM mouse:canvas-y mov-speed:5
          .-------------------------.
          |  0x0                    |
          | (fcn) fcn.00000000 17   |
          |   fcn.00000000 ();      |
          | ; '!'                   |
          | mov eax, 0xc1000021     |
          | jmp 4;[ga]              |
          `-------------------------'
              v
              |
              '--------.
                       |
                       |
                       |
       .---------------'
.--------.
|      | |
|.-------------------------------------------.
||  0x4                                      |
|| ; CODE XREFS from fcn.00000000 (0x5, 0xc) |
|| shr ebx, 0xfd                             |
|| ; ','                                     |
|| mov ebx, 0x2c                             |
|| jmp 4;[ga]                                |
|`-------------------------------------------'
|    v
|    |
`----'

/ (fcn) fcn.00000000 17
|   fcn.00000000 ();
|           0x00000000  ~   b8210000c1     mov eax, 0xc1000021         ; '!'
|           ; CODE XREFS from fcn.00000000 (0x5, 0xc)
|      ..-> 0x00000004      c1ebfd         shr ebx, 0xfd
|       :   0x00000007      bb2c000000     mov ebx, 0x2c               ; ','
\       `=< 0x0000000c      ebf6           jmp 4
..

/ (fcn) fcn.00000000 17
|   fcn.00000000 ();
|           0x00000000      b8210000c1     mov eax, 0xc1000021         ; '!'
|      `==< 0x00000005      ebfd           jmp 4
|       :   0x00000007      bb2c000000     mov ebx, 0x2c               ; ','
\       `=< 0x0000000c      ebf6           jmp 4
..

#
offset: 0x00000000
name: fcn.00000000
size: 14
is-pure: false
realsz: 17
stackframe: 0
call-convention: amd64
cyclomatic-cost : 7
cyclomatic-complexity: 0
bits: 64
type: fcn [NEW]
num-bbs: 3
edges: 3
end-bbs: 0
call-refs: 0x00000004 J 0x00000005 J
data-refs: 0x0000002c
code-xrefs: 0x00000005 J 0x0000000c J
in-degree: 2
out-degree: 0
data-xrefs:
locals: 0
args: 0
diff: type: new

0x00000000 0x00000005 00:0000 5 j 0x00000005
0x00000004 0x0000000e 00:0000 10 j 0x00000005
0x00000005 0x00000007 00:0000 2 j 0x00000004

/ (fcn) fcn.00000000 17
|   fcn.00000000 ();
| 0x00000000      b8210000c1     mov eax, 0xc1000021                   ; '!'
| ----------- true: 0x00000005
| ; CODE XREF from fcn.00000000 (0x5)
| 0x00000004      c1ebfd         shr ebx, 0xfd
| 0x00000007      bb2c000000     mov ebx, 0x2c                         ; ','
  0x0000000c      ebf7           jmp 5                                 ; fcn.00000000+0x5
| ----------- true: 0x00000005
| ; CODE XREF from fcn.00000000 (+0xc)
| 0x00000005      ebfd           jmp 4
| ----------- true: 0x00000004

[0x00000000]> VV @ fcn.00000000 (nodes 3 edges 3 zoom 100%) BB-NORM mouse:canvas-y mov-speed:5
        .-------------------------.
        |  0x0                    |
        | (fcn) fcn.00000000 17   |
        |   fcn.00000000 ();      |
        | ; '!'                   |
        | mov eax, 0xc1000021     |
        `-------------------------'
            v
            |
       .----'
.--------.
|      | |
|.--------------------------------------.
||  0x5                                 |
|| ; CODE XREF from fcn.00000000 (+0xc) |
|| jmp 4;[gb]                           |
|`--------------------------------------'
|    v
|    |
|    '.
|     |
| .-------------------------------------.
| |  0x4                                |
| | ; CODE XREF from fcn.00000000 (0x5) |
| | shr ebx, 0xfd                       |
| | ; ','                               |
| | mov ebx, 0x2c                       |
| | jmp 5;[ga]                          |
| `-------------------------------------'
|     v
|     |
`-----'

/ (fcn) fcn.00000000 17
|   fcn.00000000 ();
|           0x00000000  ~   b8210000c1     mov eax, 0xc1000021         ; '!'
|           ; CODE XREF from fcn.00000000 (0x5)
|       .-> 0x00000004  ~   c1ebfd         shr ebx, 0xfd
|       |   ; CODE XREF from fcn.00000000 (+0xc)
|      .`=< 0x00000005      ebfd           jmp 4
|      :    0x00000007      bb2c000000     mov ebx, 0x2c               ; ','
       `==< 0x0000000c      ebf7           jmp 5                       ; fcn.00000000+0x5
..

/ (fcn) fcn.00000000 17
|   fcn.00000000 ();
|           0x00000000      b8210000c1     mov eax, 0xc1000021         ; '!'
|       |   ; CODE XREF from fcn.00000000 (+0xc)
|      .`=< 0x00000005      ebfd           jmp 4
|      :    0x00000007      bb2c000000     mov ebx, 0x2c               ; ','
       `==< 0x0000000c      ebf7           jmp 5                       ; fcn.00000000+0x5
..

#
offset: 0x00000000
name: fcn.00000000
size: 19
is-pure: false
realsz: 24
stackframe: 0
call-convention: amd64
cyclomatic-cost : 9
cyclomatic-complexity: 0
bits: 64
type: fcn [NEW]
num-bbs: 4
edges: 4
end-bbs: 0
call-refs: 0x00000009 J 0x00000003 J
data-refs: 0x0000002c
code-xrefs: 0x00000011 J 0x0000000a J
in-degree: 2
out-degree: 0
data-xrefs:
locals: 0
args: 0
diff: type: new

0x00000000 0x00000005 00:0000 5 j 0x00000005
0x00000003 0x00000005 00:0000 2 j 0x00000005
0x00000005 0x0000000c 00:0000 7 j 0x00000009
0x00000009 0x00000013 00:0000 10 j 0x00000003

/ (fcn) fcn.00000000 24
|   fcn.00000000 ();
| 0x00000000      0f1f440000     nop dword [rax + rax]
| ----------- true: 0x00000005
| ; CODE XREF from fcn.00000000 (0x11)
| 0x00000003      0000           add byte [rax], al
| ----------- true: 0x00000005
| 0x00000005      b8210000c1     mov eax, 0xc1000021                   ; '!'
| 0x0000000a      ebfd           jmp 9
| ----------- true: 0x00000009
| ; CODE XREF from fcn.00000000 (0xa)
| 0x00000009      c1ebfd         shr ebx, 0xfd
| 0x0000000c      bb2c000000     mov ebx, 0x2c                         ; ','
\ 0x00000011      ebf0           jmp 3
| ----------- true: 0x00000003

[0x00000000]> VV @ fcn.00000000 (nodes 4 edges 4 zoom 100%) BB-NORM mouse:canvas-y mov-speed:5
       .---------------------------.
       |  0x0                      |
       | (fcn) fcn.00000000 24     |
       |   fcn.00000000 ();        |
       | nop dword [rax + rax]     |
       `---------------------------'
           v
           |
           '--.
.---------------.
|             | |
|       .-------------------------.
|       |  0x5                    |
|       | ; '!'                   |
|       | mov eax, 0xc1000021     |
|       | jmp 9;[ga]              |
|       `-------------------------'
|           v
|           |
|     .-----'
|     |
| .-------------------------------------.
| |  0x9                                |
| | ; CODE XREF from fcn.00000000 (0xa) |
| | shr ebx, 0xfd                       |
| | ; ','                               |
| | mov ebx, 0x2c                       |
| | jmp 3;[gb]                          |
| `-------------------------------------'
|     v
|     |
|    .'
|    |
|.--------------------------------------.
||  0x3                                 |
|| ; CODE XREF from fcn.00000000 (0x11) |
|| add byte [rax], al                   |
|`--------------------------------------'
|    v
|    |
`----'

/ (fcn) fcn.00000000 24
|   fcn.00000000 ();
|           0x00000000  ~   0f1f440000     nop dword [rax + rax]
|           ; CODE XREF from fcn.00000000 (0x11)
|       .-> 0x00000003      0000           add byte [rax], al
|       :   0x00000005  ~   b8210000c1     mov eax, 0xc1000021         ; '!'
|       :   ; CODE XREF from fcn.00000000 (0xa)
|      .--> 0x00000009      c1ebfd         shr ebx, 0xfd
|       :   0x0000000c      bb2c000000     mov ebx, 0x2c               ; ','
\       `=< 0x00000011      ebf0           jmp 3
..

/ (fcn) fcn.00000000 24
|   fcn.00000000 ();
|           0x00000000      0f1f440000     nop dword [rax + rax]
|       :   0x00000005      b8210000c1     mov eax, 0xc1000021         ; '!'
|      `==< 0x0000000a      ebfd           jmp 9
|       :   0x0000000c      bb2c000000     mov ebx, 0x2c               ; ','
\       `=< 0x00000011      ebf0           jmp 3
..
RUN

NAME=lcall offset (#12284)
FILE=-
CMDS=<<EXPECT
e asm.arch=x86
e asm.bits=16
wx 9a34002001
?v $j
EXPECT=0x1234
RUN

NAME=ljmp offset (#12284)
FILE=-
CMDS=<<EXPECT
e asm.arch=x86
e asm.bits=16
wx ea34002001
?v $j
EXPECT=0x1234
RUN

NAME=so -N and overlapping basic blocks
FILE=-
CMDS=<<EXPECT
e anal.jmp.mid=true
e io.cache=true
e anal.nopskip=false
wx 0f1f440000b8210000c1ebfdbb2c000000ebf0
af
s 0x4
so -1
s
s 0x4
so -2
s
EXPECT=<<RUN
0x3
0x0
RUN
